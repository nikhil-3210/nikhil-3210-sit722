name: Staging Deploy (Ephemeral)
on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

jobs:
  deploy-staging:
    if: >
      ${{ 
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.event == 'push'
      }}
    runs-on: ubuntu-latest
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
      STAGING_RG: ${{ secrets.STAGING_RG }}
      LOCATION: ${{ secrets.AZURE_REGION }}
      IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get ACR login server
        id: acr
        run: echo "LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Ensure RG exists
        run: az group create -n "$STAGING_RG" -l "$LOCATION"

      - name: Create product_service staging (with DB sidecar)
        run: |
          ACR_USERNAME=$(az acr credential show -n $ACR_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show -n $ACR_NAME --query passwords[0].value -o tsv)
          
          cat <<EOF > deploy-product.yaml
          apiVersion: '2019-12-01'
          location: $LOCATION
          name: sit722-product-stg
          properties:
            containers:
            - name: product-service
              properties:
                image: ${{ steps.acr.outputs.LOGIN_SERVER }}/product_service:${IMAGE_TAG}
                resources:
                  requests:
                    cpu: 1
                    memoryInGB: 1
                ports:
                - port: 8001
                environmentVariables:
                - name: 'POSTGRES_HOST'
                  value: 'postgres-db'
                - name: 'POSTGRES_PORT'
                  value: '5432'
                - name: 'POSTGRES_DB'
                  value: 'products'
                - name: 'POSTGRES_USER'
                  value: 'postgres'
                - name: 'POSTGRES_PASSWORD'
                  value: 'postgres'
            - name: postgres-db
              properties:
                image: postgres:16-alpine
                resources:
                  requests:
                    cpu: 1
                    memoryInGB: 1
                environmentVariables:
                - name: 'POSTGRES_PASSWORD'
                  value: 'postgres'
                - name: 'POSTGRES_DB'
                  value: 'products'
            osType: Linux
            restartPolicy: Always
            ipAddress:
              type: Public
              ports:
              - protocol: TCP
                port: 8001
              dnsNameLabel: sit722-product-${{ github.run_id }}
            imageRegistryCredentials:
            - server: ${{ steps.acr.outputs.LOGIN_SERVER }}
              username: $ACR_USERNAME
              password: $ACR_PASSWORD
          tags: {}
          type: Microsoft.ContainerInstance/containerGroups
          EOF
          
          az container create -g "$STAGING_RG" --file deploy-product.yaml

      - name: Create order_service staging (with DB sidecar)
        run: |
          ACR_USERNAME=$(az acr credential show -n $ACR_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show -n $ACR_NAME --query passwords[0].value -o tsv)
          
          cat <<EOF > deploy-order.yaml
          apiVersion: '2019-12-01'
          location: $LOCATION
          name: sit722-order-stg
          properties:
            containers:
            - name: order-service
              properties:
                image: ${{ steps.acr.outputs.LOGIN_SERVER }}/order_service:${IMAGE_TAG}
                resources:
                  requests:
                    cpu: 1
                    memoryInGB: 1
                ports:
                - port: 8002
                environmentVariables:
                - name: 'POSTGRES_HOST'
                  value: 'postgres-db'
                - name: 'POSTGRES_PORT'
                  value: '5432'
                - name: 'POSTGRES_DB'
                  value: 'orders'
                - name: 'POSTGRES_USER'
                  value: 'postgres'
                - name: 'POSTGRES_PASSWORD'
                  value: 'postgres'
            - name: postgres-db
              properties:
                image: postgres:16-alpine
                resources:
                  requests:
                    cpu: 1
                    memoryInGB: 1
                environmentVariables:
                - name: 'POSTGRES_PASSWORD'
                  value: 'postgres'
                - name: 'POSTGRES_DB'
                  value: 'orders'
            osType: Linux
            restartPolicy: Always
            ipAddress:
              type: Public
              ports:
              - protocol: TCP
                port: 8002
              dnsNameLabel: sit722-order-${{ github.run_id }}
            imageRegistryCredentials:
            - server: ${{ steps.acr.outputs.LOGIN_SERVER }}
              username: $ACR_USERNAME
              password: $ACR_PASSWORD
          tags: {}
          type: Microsoft.ContainerInstance/containerGroups
          EOF
          
          az container create -g "$STAGING_RG" --file deploy-order.yaml

      - name: Create customer_service staging (with DB sidecar)
        run: |
          ACR_USERNAME=$(az acr credential show -n $ACR_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show -n $ACR_NAME --query passwords[0].value -o tsv)
          
          cat <<EOF > deploy-customer.yaml
          apiVersion: '2019-12-01'
          location: $LOCATION
          name: sit722-customer-stg
          properties:
            containers:
            - name: customer-service
              properties:
                image: ${{ steps.acr.outputs.LOGIN_SERVER }}/customer_service:${IMAGE_TAG}
                resources:
                  requests:
                    cpu: 1
                    memoryInGB: 1
                ports:
                - port: 8003
                environmentVariables:
                - name: 'POSTGRES_HOST'
                  value: 'postgres-db'
                - name: 'POSTGRES_PORT'
                  value: '5432'
                - name: 'POSTGRES_DB'
                  value: 'customers'
                - name: 'POSTGRES_USER'
                  value: 'postgres'
                - name: 'POSTGRES_PASSWORD'
                  value: 'postgres'
            - name: postgres-db
              properties:
                image: postgres:16-alpine
                resources:
                  requests:
                    cpu: 1
                    memoryInGB: 1
                environmentVariables:
                - name: 'POSTGRES_PASSWORD'
                  value: 'postgres'
                - name: 'POSTGRES_DB'
                  value: 'customers'
            osType: Linux
            restartPolicy: Always
            ipAddress:
              type: Public
              ports:
              - protocol: TCP
                port: 8003
              dnsNameLabel: sit722-customer-${{ github.run_id }}
            imageRegistryCredentials:
            - server: ${{ steps.acr.outputs.LOGIN_SERVER }}
              username: $ACR_USERNAME
              password: $ACR_PASSWORD
          tags: {}
          type: Microsoft.ContainerInstance/containerGroups
          EOF
          
          az container create -g "$STAGING_RG" --file deploy-customer.yaml

      - name: Fetch staging IPs
        id: ips
        run: |
          PROD_IP=$(az container show -g "$STAGING_RG" -n sit722-product-stg --query "ipAddress.ip" -o tsv)
          ORD_IP=$(az container show -g "$STAGING_RG" -n sit722-order-stg --query "ipAddress.ip" -o tsv)
          CUS_IP=$(az container show -g "$STAGING_RG" -n sit722-customer-stg --query "ipAddress.ip" -o tsv)
          echo "PRODUCT_IP=$PROD_IP" >> $GITHUB_OUTPUT
          echo "ORDER_IP=$ORD_IP" >> $GITHUB_OUTPUT
          echo "CUSTOMER_IP=$CUS_IP" >> $GITHUB_OUTPUT
          echo "Staging endpoints: product:$PROD_IP:8001 order:$ORD_IP:8002 customer:$CUS_IP:8003"

      - name: Smoke tests (trivial acceptance)
        run: |
          set -e
          for i in {1..30}; do
            curl -fsS "http://${{ steps.ips.outputs.PRODUCT_IP }}:8001/health" && break || sleep 5
          done
          for i in {1..30}; do
            curl -fsS "http://${{ steps.ips.outputs.ORDER_IP }}:8002/health" && break || sleep 5
          done
          for i in {1..30}; do
            curl -fsS "http://${{ steps.ips.outputs.CUSTOMER_IP }}:8003/health" && break || sleep 5
          done

      - name: Destroy staging (clean up temp environment)
        if: always()
        run: |
          az container delete -g "$STAGING_RG" -n sit722-product-stg -y || true
          az container delete -g "$STAGING_RG" -n sit722-order-stg -y || true
          az container delete -g "$STAGING_RG" -n sit722-customer-stg -y || true