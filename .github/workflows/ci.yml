name: CI
on:
  push:
    branches: [ testing ]
jobs:
  test:
    name: Test (${{ matrix.service }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product_service, order_service, customer_service]
        include:
          - service: product_service
            port: 8001
            db: products
          - service: order_service
            port: 8002
            db: orders
          - service: customer_service
            port: 8003
            db: customers
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ matrix.db }}
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s --health-timeout=5s --health-retries=20
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        working-directory: backend/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - name: Run tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: ${{ matrix.db }}
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        working-directory: backend/${{ matrix.service }}
        run: pytest -q

  build_and_push:
    name: Build & Push images to ACR (only if all tests pass)
    runs-on: ubuntu-latest
    needs: [test]
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: ACR login
        run: az acr login --name $ACR_NAME
      - name: Set ACR login server
        id: acr
        run: echo "LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Build & push product_service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/product_service/Dockerfile
          push: true
          tags: ${{ steps.acr.outputs.LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}

      - name: Build & push order_service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/order_service/Dockerfile
          push: true
          tags: ${{ steps.acr.outputs.LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

      - name: Build & push customer_service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/customer_service/Dockerfile
          push: true
          tags: ${{ steps.acr.outputs.LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: frontend/Dockerfile
          push: true
          tags: ${{ steps.acr.outputs.LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}